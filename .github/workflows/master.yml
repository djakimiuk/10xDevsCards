name: Build and Deploy to Cloudflare

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Fix formatting issues
        run: npm run format

      - name: Fix linting issues
        run: npm run lint:fix

      - name: Run linting
        run: npm run lint
        env:
          ESLINT_MAX_WARNINGS: 50

  unit-test:
    name: Unit Tests
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm run test

  deploy:
    name: Build and Deploy
    needs: [lint, unit-test]
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Install Node.js adapter
        run: npm install @astrojs/node --save

      - name: Debug Astro config
        run: cat astro.config.mjs

      - name: Enable verbose npm logs
        run: npm config set loglevel verbose

      - name: Build project with verbose output
        run: npm run build -- --verbose
        env:
          PUBLIC_SUPABASE_URL: ${{ secrets.PUBLIC_SUPABASE_URL }}
          PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.PUBLIC_SUPABASE_ANON_KEY }}
          NODE_ENV: production

      - name: Detailed directory exploration
        run: |
          echo "Checking directory structure after build:"
          find . -maxdepth 2 -type d | sort

          echo "Exploring dist directory:"
          find ./dist -type d 2>/dev/null || echo "dist directory not found"

          echo "Looking for all static assets in dist:"
          find ./dist -type f -name "*.css" -o -name "*.js" -o -name "*.html" 2>/dev/null | head -10 || echo "No static assets found"

          echo "Contents of dist directory:"
          ls -la dist 2>/dev/null || echo "dist directory not found"

      - name: Create fallback static structure if needed
        run: |
          if [ ! -d "dist" ] && [ ! -d "dist/client" ]; then
            echo "No dist directory found. Creating a basic structure..."
            
            mkdir -p dist/client
            mkdir -p dist/client/_assets
            
            cp -r public/* dist/client/ 2>/dev/null || echo "No public assets"
            
            echo '<!DOCTYPE html>
            <html lang="en">
            <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>10xDevsCards - Under Maintenance</title>
                <style>
                    body { font-family: system-ui, sans-serif; margin: 0; padding: 2rem; background: #f5f5f5; color: #333; display: flex; justify-content: center; align-items: center; min-height: 100vh; text-align: center; }
                    .container { max-width: 600px; background: white; padding: 2rem; border-radius: 8px; box-shadow: 0 4px 6px rgba(0,0,0,0.1); }
                    h1 { color: #4f46e5; }
                </style>
            </head>
            <body>
                <div class="container">
                    <h1>10xDevsCards</h1>
                    <p>The application is currently under maintenance. Please check back soon.</p>
                </div>
            </body>
            </html>' > dist/client/index.html
            
            echo "Basic static structure created."
          else
            echo "dist directory exists, no need for fallback."
          fi

      - name: Deploy to Cloudflare Pages with Wrangler
        run: |
          if [ -d "dist/client" ]; then
            DEPLOY_DIR="dist/client"
          elif [ -d "dist" ]; then
            DEPLOY_DIR="dist"
          else
            echo "Nie znaleziono katalogu do wdrożenia"
            exit 1
          fi

          echo "Wdrażanie z katalogu: $DEPLOY_DIR"
          npx wrangler pages deploy $DEPLOY_DIR --project-name=10xdevscards --branch=main
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
